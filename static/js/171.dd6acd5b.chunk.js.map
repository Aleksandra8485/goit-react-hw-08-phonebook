{"version":3,"file":"static/js/171.dd6acd5b.chunk.js","mappings":"2NAIaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,kBAAMC,SAba,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfN,GACEO,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAGrCL,EAAKO,OACN,EAG+BC,aAAa,MAA3C,WACE,sCAEE,kBAAOC,KAAK,QAAQC,KAAK,cAE3B,yCAEE,kBAAOD,KAAK,WAAWC,KAAK,iBAE9B,mBAAQD,KAAK,SAAb,sBAGL,EC7Bc,SAASE,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,wCAEF,SAAClB,EAAD,MAGL,C","sources":["components/LoginForm/LoginForm.jsx","pages/loginPage.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n// import css from './LoginForm.module.css';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <label>\n        Email\n        <input type=\"email\" name=\"email\" />\n      </label>\n      <label>\n        Password\n        <input type=\"password\" name=\"password\" />\n      </label>\n      <button type=\"submit\">Log In</button>\n    </form>\n  );\n};\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n\n// function LoginForm() {\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleLogin = async () => {\n//     try {\n//       const response = await axios.post(\n//         'https://connections-api.herokuapp.com/users/login',\n//         {\n//           email,\n//           password,\n//         }\n//       );\n//       // Zapisz token JWT w Local Storage\n//       localStorage.setItem('token', response.data.token);\n\n//       // Wykonaj jakieś akcje, np. przekierowanie na stronę po zalogowaniu\n//       navigate('/');\n//     } catch (error) {\n//       // Obsługa błędu (np. wyświetlenie komunikatu o nieudanym logowaniu)\n//       console.error(error);\n//     }\n//   };\n//   return (\n//     <form>\n//       <div>\n//         <label htmlFor=\"email\">Email:</label>\n//         <input\n//           type=\"email\"\n//           id=\"email\"\n//           value={email}\n//           onChange={e => setEmail(e.target.value)}\n//         />\n//       </div>\n//       <div>\n//         <label htmlFor=\"password\">Hasło:</label>\n//         <input\n//           type=\"password\"\n//           id=\"password\"\n//           value={password}\n//           onChange={e => setPassword(e.target.value)}\n//         />\n//       </div>\n//       <button type=\"button\" onClick={handleLogin}>\n//         Zaloguj się\n//       </button>\n//     </form>\n//   );\n// }\n\n// export default LoginForm;\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from '../components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["LoginForm","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","autoComplete","type","name","Login","Helmet"],"sourceRoot":""}