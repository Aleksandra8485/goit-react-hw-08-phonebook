{"version":3,"file":"static/js/796.20120268.chunk.js","mappings":"2NAAaA,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAAnB,E,SCClC,EAAuB,0BAAvB,EAAiE,mCAAjE,EAA4G,2B,SCwD5G,EAnD2B,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAkBA,OACE,kBAAMC,UAAWC,EAAaC,SAjBX,SAAAC,GACnBA,EAAMC,iBAGc,KAAhBR,EAAKS,QAAmC,KAAlBP,EAAOO,SAKjCZ,GAASa,EAAAA,EAAAA,IAAY,CAAEV,KAAAA,EAAME,OAAAA,KAG7BD,EAAQ,IACRE,EAAU,IACX,EAGC,WACE,kBACEQ,KAAK,OACLC,YAAY,OACZC,MAAOb,EACPA,KAAK,OACLc,QAAQ,6BACRC,MAAM,yIACNC,UAAQ,EACRC,SAAU,SAAAC,GAAC,OAAIjB,EAAQiB,EAAEC,OAAON,MAArB,EACXT,UAAWC,KAEb,kBACEM,KAAK,OACLC,YAAY,eACZC,MAAOX,EACPY,QAAQ,yBACRC,MAAM,+FACNC,UAAQ,EACRC,SAAU,SAAAC,GAAC,OAAIf,EAAUe,EAAEC,OAAON,MAAvB,EACXT,UAAWC,KAEb,mBAAQD,UAAWC,EAAsBM,KAAK,SAA9C,2BAKL,E,2BCtDD,EAA8B,iCAA9B,EAA6E,iCAA7E,EAA4H,iCAA5H,EAA6K,mCAA7K,EAA4N,+BC6C5N,EAxCoB,WAClB,IAAMd,GAAWC,EAAAA,EAAAA,MACXH,GAAWyB,EAAAA,EAAAA,KAAY,SAAA1B,GAAK,OAAIA,EAAMC,SAASA,QAAnB,IAC5B0B,GAASD,EAAAA,EAAAA,KAAY,SAAA1B,GAAK,OAAIA,EAAMC,SAAS0B,MAAnB,KAEhCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAwB,mCAAG,8EAC/B1B,GAAS2B,EAAAA,EAAAA,OADsB,2CAAH,qDAI9BD,GACD,GAAE,CAAC1B,IAGJ,IAAM4B,EAAmB9B,EAAS0B,QAAO,SAAAK,GAAO,OAC9CA,EAAQ1B,KAAK2B,cAAcC,SAASP,EAAOM,cADG,IAQhD,OACE,eAAIvB,UAAWC,EAAf,SACGoB,EAAiBI,KAAI,SAAAH,GAAO,OAC3B,gBAAqBtB,UAAWC,EAAhC,WACE,iBAAMD,UAAWC,EAAjB,SAAsCqB,EAAQ1B,QAC9C,iBAAMI,UAAWC,EAAjB,SAAwCqB,EAAQxB,UAChD,mBACEE,UAAWC,EACXyB,QAAS,kBAZEC,EAYiBL,EAAQM,QAX5CnC,GAASoC,EAAAA,EAAAA,IAAcF,IADJ,IAAAA,CAYF,EAFX,sBAHOL,EAAQM,GADU,KAclC,ECpCc,SAASE,IACtB,IAAMrC,GAAWC,EAAAA,EAAAA,MACXqC,GAAYf,EAAAA,EAAAA,IAAY3B,GAM9B,OAJA6B,EAAAA,EAAAA,YAAU,WACRzB,GAAS2B,EAAAA,EAAAA,MACV,GAAE,CAAC3B,KAGF,iCACE,SAACuC,EAAA,EAAD,WACE,6CAGF,yBAAMD,GAAa,4BACnB,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/contactsPage.jsx"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllTasks = state => state.contacts.items;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"addContactBtn\":\"ContactForm_addContactBtn__3KI6e\",\"input\":\"ContactForm_input__Bl93P\"};","import React, { useState } from 'react';\n// import axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { saveContact } from '../../redux/contacts/operations';\nimport styles from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    // sprawdzenie czy są puste pola\n    if (name.trim() === '' || number.trim() === '') {\n      return;\n    }\n\n    // wywołanie akcji `saveContact`\n    dispatch(saveContact({ name, number }));\n\n    //resetowanie formularza po dodaniu kontaktu\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Name\"\n        value={name}\n        name=\"name\"\n        pattern=\"^[a-zA-Z]+(\\s[a-zA-Z]+)?$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={e => setName(e.target.value)}\n        className={styles.input}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Phone Number\"\n        value={number}\n        pattern=\"^\\d{3}-\\d{3}-\\d{3}$\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={e => setNumber(e.target.value)}\n        className={styles.input}\n      />\n      <button className={styles.addContactBtn} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n\n// const ContactForm = () => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const handleSubmit = async e => {\n//     e.preventDefault();\n\n//     // Wprowadzenie walidacji dla imienia\n//     const namePattern = /^[A-Za-z.'\\- ]+$/;\n//     if (!namePattern.test(name)) {\n//       alert(\n//         'Invalid name. Please use only letters, spaces, apostrophes, hyphens, and dots.'\n//       );\n//       return;\n//     }\n\n//     // Wprowadzenie walidacji dla numeru telefonu\n//     const numberPattern =\n//       /^\\+?\\d{1,4}?\\s?\\(?\\d{1,4}?\\)?\\s?\\d{1,4}\\s?\\d{1,4}\\s?\\d{1,9}$/;\n//     if (!numberPattern.test(number)) {\n//       alert('Invalid phone number. Please use a valid phone number format.');\n//       return;\n//     }\n//     try {\n//       const response = await axios.post(\n//         'https://connections-api.herokuapp.com/contacts',\n//         { name, number }\n//       );\n\n//       // Wykonaj jakieś akcje po dodaniu kontaktu, np. wyświetlenie potwierdzenia\n//       console.log('Contact added:', response.data);\n//     } catch (error) {\n//       // Obsługa błędu, np. wyświetlenie komunikatu o nieudanym dodaniu kontaktu\n//       console.error(error);\n//     }\n//     //resetowanie formularza po dodaniu kontaktu\n//     setName('');\n//     setNumber('');\n//   };\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactName\":\"ContactList_contactName__wLcl6\",\"contactNumber\":\"ContactList_contactNumber__aD17w\",\"deleteBtn\":\"ContactList_deleteBtn__1dg25\"};","import React, { useEffect } from 'react';\n// import axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, deleteContact } from '../../redux/contacts/operations';\nimport styles from './ContactList.module.css';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.contacts.filter);\n\n  useEffect(() => {\n    const fetchContactsFromBackend = async () => {\n      dispatch(fetchContacts()); // Pobieranie kontaktów z backendu przy montowaniu komponentu\n    };\n\n    fetchContactsFromBackend(); // Pobieranie kontaktów z backendu przy montowaniu komponentu\n  }, [dispatch]);\n\n  //filtrowanie kontaktów na podstawie wartości filtra\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <ul className={styles.contactList}>\n      {filteredContacts.map(contact => (\n        <li key={contact.id} className={styles.contactItem}>\n          <span className={styles.contactName}>{contact.name}</span>\n          <span className={styles.contactNumber}>{contact.number}</span>\n          <button\n            className={styles.deleteBtn}\n            onClick={() => handleDelete(contact.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\n//   useEffect(() => {\n//     const fetchContactsFromBackend = async () => {\n//       const token = getTokenFromLocalStorage(); // Pobierz token JWT z Local Storage\n\n//       // Ustaw token JWT w nagłówku żądania\n//       setAuthToken(token);\n\n//       dispatch(fetchContacts()); // Pobieranie kontaktów z backendu przy montowaniu komponentu\n//     };\n\n//     fetchContactsFromBackend(); // Pobieranie kontaktów z backendu przy montowaniu komponentu\n//   }, [dispatch]);\n\n//   const getTokenFromLocalStorage = () => {\n//     return localStorage.getItem('token');\n//   };\n\n//   const setAuthToken = token => {\n//     if (token) {\n//       axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n//     } else {\n//       delete axios.defaults.headers.common['Authorization'];\n//     }\n//   };\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactForm />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectLoading","state","contacts","loading","dispatch","useDispatch","useState","name","setName","number","setNumber","className","styles","onSubmit","event","preventDefault","trim","saveContact","type","placeholder","value","pattern","title","required","onChange","e","target","useSelector","filter","useEffect","fetchContactsFromBackend","fetchContacts","filteredContacts","contact","toLowerCase","includes","map","onClick","contactId","id","deleteContact","Contacts","isLoading","Helmet"],"sourceRoot":""}